%ul.lightboxnavigation
  %li.selected
    %a{:href => "#", :onclick => "jQuery('.forms').hide(); jQuery('.first-form').show();jQuery('ul.lightboxnavigation li').removeClass('selected'); jQuery(this).parent().addClass('selected');"} Profile details
  %li.last
    %a{:href => "#", :onclick => "jQuery('.forms').hide();jQuery('.second-form').show();jQuery('ul.lightboxnavigation li').removeClass('selected'); jQuery(this).parent().addClass('selected');"} Profile photo
  - if current_user.is_a?(SimpleUser)
    %li
      %a{:href => "#", :onclick => "jQuery('.forms').hide();jQuery('.third-form').show();jQuery('ul.lightboxnavigation li').removeClass('selected'); jQuery(this).parent().addClass('selected');"} Change your password
%br

.lightbox-content
  .first-form.forms
    #form-error.hide
    - form_tag user_path(@user), :id => "first-form", :method => :put do
      %label First name
      = text_field_tag "user[first_name]", @user.first_name, {:field_name => "First name", :autocomplete => "off"}
      %label Last name
      = text_field_tag "user[last_name]", @user.last_name, {:field_name => "Last name", :autocomplete => "off"}
      %label Your handle
      = text_field_tag "user[handle]", @user.handle, {:field_name => "Handle", :autocomplete => "off"}
      
      %label Your twitter handle (show twitter updates on your newsfeed)
      = text_field_tag "user[twitter_handle]", @user.twitter_handle, {:field_name => "Twitter handle", :autocomplete => "off", :hint => ""}
      
      #user_details_city_container
        %label Hometown
        = hidden_field_tag "user_details[city][id]", @user.detail.cities_id
        - city_and_country_name = @user.detail.city.present? ? @user.detail.city.city_and_country_name : nil
        = text_field_tag "user_details[city][name]", city_and_country_name, {:autocomplete => "off"}
        .in-place-results
          .holder
      
      %label Summary
      = text_area_tag "user_details[summary]", @user.detail.summary
      %br
      %p= submit_tag "Save"

  .second-form.forms.hide
    - form_for(:user_photo, :url => user_photos_path(@user), :html => { :multipart => true}) do |f|
      %input{:type=>"hidden", :name=>"_method", :value=> :post}
      = f.file_field :uploaded_data
      %br
      %p
        = submit_tag "Upload"
    - if @user.is_a?(FbUser) and @user.has_photo?
      #separator{:style => "border-bottom: 1px solid #DDD"}
      %span.left{:style => "margin-top: 8px; font-size: 0.8em"} or delete the current photo and
      %span.left=button_to 'use Facebook photo', user_photo_path(@user.id, @user.photo.id), :method => :delete

  .third-form.forms.hide
    #form-error.hide
    - form_tag update_password_user_path(@user), :id => "third-form", :method => :put do
      %label Password
      = password_field_tag "simple_user[password]", "", {:field_name => "Password", :autocomplete => "off", :hint => ""}
      %br
      %p= submit_tag "Change"

:javascript

  jQuery(document).ready(function()
  {
    jQuery("#first-form").ajaxify_form();
    searchify_section("#user_details_city", "/autocomplete/cities");
    
    
    jQuery("#third-form").bind('submit', function(e)
    {
      e.stopPropagation();
      var form = jQuery(this);

      jQuery.ajax(
      {
        url: jQuery(this).attr("action"),
        type: "POST",
        data: form.serialize(),
        dataType: "json",
        beforeSend: function()
        {
          jQuery("#form-error", form).hide();
          jQuery("input[type='text']", form).removeClass("error");
          submit_button_label = jQuery("input[type='submit']", form).attr('value');
          jQuery("input[type='submit']", form).attr('value', "Processing...");
        },
        complete: function()
        {
          //jQuery("input[type='submit']", form).attr('value', submit_button_label);
        },
        error: function(XMLHttpRequest, textStatus, errorThrown)
        {
          jQuery("input[type='submit']", form).attr('value', submit_button_label);

          var errors_for_models = jQuery.evalJSON(XMLHttpRequest.responseText);
          var messages = "";

          jQuery.each(errors_for_models, function(model, errors)
          {
            jQuery.each(errors, function(index, field_and_error_message)
            {
              var id = model + "_" + jQuery(field_and_error_message)[0];
              var field = jQuery("#" + id, form);
              var error_message = jQuery(field_and_error_message, form)[1];

              var label = field.attr("field_name") == undefined ? field.attr("name") : field.attr("field_name");

              field.addClass("error");
              messages += "<p>" + label + " " + error_message + "</p>";
            })

          })

          jQuery(".third-form #form-error").html(messages);
          jQuery(".third-form #form-error").fadeIn("slow");

        },
        success: function(json, textStatus)
        {
        }
      });    
      return false;
    })
  })

